% filepath: /Users/muxin/work/github/latex-mermaid/mermaid.sty
% =================================================================
%          A Minimalist Mermaid Package for LaTeX
% =================================================================
% Version: 10.0 (2025-08-15) - The Final Stable Implementation
% Features:
% - A robust \begin{mermaid}[width]{caption}{label} environment.
% - Compiles directly to PDF using `mmdc`.
% - MD5-based caching to skip unchanged diagrams.
% - Flexible mmdc options via \mermaidsetup{...}.
%
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{mermaid}[2025/08/15 v10.0 Minimalist Mermaid Package (Stable)]

% 1. REQUIRED PACKAGES
\RequirePackage{fancyvrb}
\RequirePackage{graphicx}
\RequirePackage{etoolbox}
\RequirePackage{kvoptions}
\RequirePackage{ifplatform}
\RequirePackage{float}

% 2. PACKAGE OPTIONS & SETUP COMMAND
\DeclareStringOption[build]{imagepath} % Default output dir is 'build'
\DeclareStringOption[]{latexoutputdir}
\ProcessKeyvalOptions*


\def\mermaidoutdir{\mermaid@latexoutputdir}

\newcommand*{\mermaidsetup}[1]{\gdef\mermaid@cli@options{#1}}
\mermaidsetup{}

% 3. THE CORE PROCESSING COMMAND (Called at the end)
\newcommand{\mermaid@process}{
    % --- Setup file paths using globally defined macros ---
    \def\mermaiddir{\mermaid@imagepath}
    \def\mermaiddpf{\mermaiddir/\mermaid@label}
    \def\mermaidsrc{\mermaiddpf.mmd}
    \def\mermaiddst{\mermaiddpf.pdf}

    % --- Caching Logic ---
    \newif\ifmermaidneedscompiling
    \mermaidneedscompilingtrue
    \def\mermaidgetmdFiveNode{node -e "try{process.stdout.write(require('crypto').createHash('md5').update(require('fs').readFileSync(process.argv[1])).digest('hex'))}catch(e){}" "\mermaidoutdir/\mermaidsrc"}
    \immediate\write18{\mermaidgetmdFiveNode > "\mermaidoutdir/\mermaidsrc.md5.tmp"}
    \CatchFileDef{\mermaidnewhash}{\mermaidsrc.md5.tmp}{}
    \IfFileExists{\mermaiddst}{
      \IfFileExists{\mermaidsrc.md5}{
        \CatchFileDef{\mermaidoldhash}{\mermaidsrc.md5}{}
        \ifx\mermaidoldhash\mermaidnewhash
          \typeout{>>> MERMAID: Skipping `\mermaidsrc' (cache hit)}
          \mermaidneedscompilingfalse
        \fi
      }{\relax}
    }{\relax}

    % --- Compilation Step ---
    \ifmermaidneedscompiling
      \typeout{>>> MERMAID: Compiling `\mermaidsrc'}
      \edef\mermaidcmd{npx --package @mermaid-js/mermaid-cli mmdc -i "\mermaidoutdir/\mermaidsrc" -o "\mermaidoutdir/\mermaiddst" -b transparent \mermaid@cli@options}
      \immediate\write18{\mermaidcmd}
      \immediate\write18{cd ./\mermaidoutdir/ && pdfcrop "\mermaiddst" "\mermaiddst"}
      \ifwindows
        \immediate\write18{move /Y "\mermaidoutdir/\mermaidsrc.md5.tmp" "\mermaidoutdir/\mermaidsrc.md5" > nul}
      \else
        \immediate\write18{mv "\mermaidoutdir/\mermaidsrc.md5.tmp" "\mermaidoutdir/\mermaidsrc.md5"}
      \fi
    \else
      \ifwindows
        \immediate\write18{del "\mermaidoutdir/\mermaidsrc.md5.tmp" 2>nul}
      \else
        \immediate\write18{rm -f "\mermaidoutdir/\mermaidsrc.md5.tmp"}
      \fi
    \fi

    % --- Figure Insertion ---
    \begin{figure}[H]
      \centering
      \includegraphics[width=\mermaid@width]{\mermaidoutdir/\mermaiddst}
      \caption{\mermaid@caption}
      \label{fig:\mermaid@label}
    \end{figure}
}

% 4. THE NEW, ROBUST ENVIRONMENT DEFINITION
% This is the internal environment that does the actual verbatim capture.
\newenvironment{mermaid@internal}
  {\VerbatimOut{\mermaid@imagepath/\mermaid@label.mmd}}
  {\endVerbatimOut\mermaid@process}

% This is the user-facing environment. It takes arguments and starts the internal one.
\newenvironment{mermaid}[3][\columnwidth]
  {
    % Store arguments globally so the internal environment can find them
    \gdef\mermaid@width{#1}
    \gdef\mermaid@caption{#2}
    \gdef\mermaid@label{#3}
    % Create the output directory *before* starting the verbatim environment
    \immediate\write18{mkdir -p "\mermaidoutdir/\mermaid@imagepath"}
    % Start the simple, internal environment
    \mermaid@internal
  }
  {\endmermaid@internal}

\endinput
%% END OF mermaid.sty